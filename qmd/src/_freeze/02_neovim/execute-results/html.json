{
  "hash": "21e26c3f4d325fe0c2c60a233b520246",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Neovim\n---\n\n\n\n\n\n\n# Why Neovim?\n\n## On Neovim\n\n* Neovim is free,\n* Neovim is very widely available,\n* Neovim is highly customizable,\n* Neovim is stable, year-on-year,\n* and Neovim is quite powerful.\n\n[Watch more](https://www.youtube.com/watch?v=dR00OugPlLc&list=PLabWm-zCaD1axcMGvf7wFxJz8FZmyHSJ7&index=14)\n\n## Why not Neovim?\n\n\n- **Modal** - it is not a \"What you see is what you get\" (WYSIWYG) editor like MS Word, Google Docs, Notepad, or VS Code\n- **Terminal-based** - it is used within the terminal and not often as a stand-alone program.\n- **Steep-learning curve** - students generally find it difficult to get started, though it is widely briefed by experienced users\n\n# Running Example\n\n## Diving In\n\n- Taking Neovim as a given, we'll:\n    - Continue the *piecewise functions* example\n    - Touch on Python and the terminal in the context of Neovim\n    - Introduce Neovim *modes*, *motions*, and *operators*.\n- Spoilers for the last exercise!\n\n\n## Exercise\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n- Write function\n- `def single_tax(pay):`\n- *Return* tax cost.\n    - Return not print!\n- Bonus: Also write `single_tax_rate` which returns the percent tax rate at some income level.\n\n:::\n\n::: {.column width=\"50%\"}\n\n| Rate   | From    |\n|--------|--------:|\n| 10%    | 0       |\n| 15%    | 9275    |\n| 25%    | 37650   |\n| 28%    | 91150   |\n| 33%    | 190150  |\n| 35%    | 413350  |\n| 39.6%  | 415050  |\n\n:::\n\n::::\n\n## Solutions\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {#67f50568 .cell execution_count=2}\n``` {.python .cell-code}\ndef single_tax(pay):\n    tax = 0\n    if pay > 415050:\n        tax += (pay - 415050) * .396\n        pay = 415050\n    if pay > 413350:\n        tax += (pay - 413350) * .35\n        pay = 413350\n    if pay > 190150:\n        tax += (pay - 190150) * .33\n        pay = 190150\n    if pay > 91150:\n        tax += (pay - 91150) * .28\n        pay = 91150\n    if pay > 37650:\n        tax += (pay - 37650) * .25\n        pay = 37650\n    if pay > 9275:\n        tax += (pay - 9275) * .15\n        pay = 9275\n    return tax + pay * .1\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#60b2892d .cell execution_count=3}\n``` {.python .cell-code}\ndef single_tax(pay):\n    tax_policy = [\n        [415050, .396], \n        [413350, .35],\n        [190150, .33],\n        [91150, .28],\n        [37650, .25],\n        [9275, .15]\n    ]\n    tax = 0\n    for bracket in tax_policy:\n        if pay > bracket[0]:\n            tax += (pay - bracket[0]) * bracket[1]\n            pay = bracket[0]\n    return tax + pay * .1\n```\n:::\n\n\n:::\n\n::::\n\n## Tedious to Type\n\n```{.bash code-line-numbers=\"false\"}\nPS C:\\Users\\calvin> python\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> def single_tax(pay):\n...     tax_policy = [\n...         [415050, .396],\n...         [413350, .35],\n...         [190150, .33],\n...         [91150, .28],\n...         [37650, .25],\n...         [9275, .15]\n...     ]\n...     tax = 0\n...     for bracket in tax_policy:\n...         if pay > bracket[0]:\n...             tax += (pay - bracket[0]) * bracket[1]\n...             pay = bracket[0]\n...     return tax + pay * .1\n...\n>>> single_tax(400000)\n115529.25\n>>>\n```\n\n## Instead: .py files\n\n- Python has an associated file type, the `.py` file.\n    - Similar to `.png` (portable network graphic) for images\n    - Similar to `.pdf` (portable document format) for papers\n\n## Test-based\n\n- The `.py` file is much like a `.txt` file in that:\n    - It is a small, lightweight file containing only typed characters.\n    - It can be opened, edited, and viewed in many editors.\n- The `.py` file can save typed code to be used within `python`.\n\n## Enter Neovim\n\n- Neovim is a *great* way to edit text.\n\n::: {.callout-tip}\n\n## Give it a shot!\n\nStudents often object to switching from WYSIWYG editors but:\n\n- Many students know *no other way* to write text-based files, and\n- We've ample time this term to properly explore Neovim\n\nBe patient, but also work hard!\n\n:::\n\n# Getting Neovim\n\n## Installation\n\n- We go to the offial webpage to get an installer for our computer:\n    - [https://neovim.io/](https://neovim.io/)\n- Neovim offers a few more installation options than you may be used to.\n- I recommend...\n\n## Install from download\n\nDownloads are available on the [Releases](https://github.com/neovim/neovim/releases) page.\n\n* Latest [stable release](https://github.com/neovim/neovim/releases/latest)\n    * [macOS x86_64](https://github.com/neovim/neovim/releases/latest/download/nvim-macos-x86_64.tar.gz)\n    * [macOS arm64](https://github.com/neovim/neovim/releases/latest/download/nvim-macos-arm64.tar.gz)\n    * [Linux x86_64](https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz)\n    * [Linux arm64](https://github.com/neovim/neovim/releases/latest/download/nvim-linux-arm64.tar.gz)\n    * [Windows](https://github.com/neovim/neovim/releases/latest/download/nvim-win64.msi)\n\n## Terminal\n\n- On MS Windows\n    - I press Windows key, type \"terminal\" then press enter.\n- On MacOS\n    - I open Launchpad, type \"terminal\" then press enter.\n\n## MacOS\n\n![](img/zsh.png)\n\n## Windows\n\n![](img/ps.webp)\n\n## Expression evaluation\n\n- Returning to the terminal, we can type at the \"prompt\".\n- On MacOS, perhaps a line that begins with `$` and a flashing cursor\n- On Window, perhaps `PS C:\\Users\\calvin>`\n    - `PS` stands for \"powershell\" - more latter.\n    - `C:\\Users\\calvin` is the name of a folder - more latter\n    - `>` is the prompt, with a flashing cursor.\n\n## Run Neovim \n\n*In the following examples, I remove line numbers to denote they are not Python code snippets.*\n\n- On MacOS, type `nvim`\n```{.zsh filename=\"MacOS\" code-line-numbers=\"false\"}\n$ nvim\n```\n- On Windows, type `nvim`\n```{.ps filename=\"Windows\" code-line-numbers=\"false\"}\nPS C:\\Users\\calvin> nvim\n```\n- On both, press the **↵ᴇɴᴛᴇʀ** key.\n\n## See Neovim\n\n- You'll see something like this:\n```{.bash code-line-numbers=\"false\"}\n                  NVIM v0.11.1\n\n  Nvim is open source and freely distributable\n           https://neovim.io/#chat\n\n type :help nvim<Enter>               if you are new!\n type :checkhealth<Enter>             to optimize Nvim\n type :q<Enter>                       to exit\n type :help<Enter>                    for help\n\ntype :help news<Enter> to see changes in v0.11\n\n        Help poor children in Uganda!\n type :help iccf<Enter>               for information\n```\n\n# Modes\n\n## Modality\n\n- `nvim` is a *modal* text editor\n- By default, typed characters will not appear in the document.\n- Rather, by default, we being in *command* mode.\n- We won't worry about that too much, but the first command to learn is\n```{.bash code-line-numbers=\"false\"}\ni\n```\n- `i` for insert\n\n## Insert Mode\n\n- By the way, you should see `-- INSERT --` at the bottom of the terminal window.\n- Insert mode is not unlike WYSIWYG\n- Use it prolificly until you are more comfortable.\n- Navigate with arrow keys or (depending on system) mouse\n- For now, let's copy paste in the `piecewise` function.\n\n\n## Piecewise\n\n- For me, basic copy/paste commands like:\n\t- ctrl/cmd+c, ctrl/cmd+v \n\t- rclick->menu->copy\n- Worked amicably in `i` insert mode\n\n```{.python}\ndef piecewise(x):\n    if (x < 4):\n        return 9 * x ** 2 + 5\n    elif (4 <= x <= 8):\n        return 9\n    elif (x > 8):\n        return 2 - x\n```\n\n## Command Mode\n\n- Having written some text, we now need to save it to a file.\n- Press `:` to return to command mode\n- Your cursor will move the bottom of the terminal, where `-- INSERT --` was\n\n## Issuing commands\n\n- After `:` type `w` (write) and the name of the file\n- Include the `.py` ending!\n- I wrote:\n```{.bash code-line-numbers=\"false\"}\n:w pw.py\n```\n\n## Save and Quit\n\n- You can always use `:w` to save while working.\n- Make any edits you make need to make - a missed paren perhaps.\n- Then both save *and* exit `nvim` with `:x`\n\t- This special command saves the file and exists `nvim`\n- You will return to the command line you started with, likely without incident.\n  \t- But there will now be a new file you can use!\n\n# Scripting\n\n## Back in Terminal\n\n- On MacOS, you'll see `nvim` and a new prompt\n```{.zsh filename=\"MacOS\" code-line-numbers=\"false\"}\n$ nvim\n$\n```\n- On Windows, the same\n```{.ps filename=\"Windows\" code-line-numbers=\"false\"}\nPS C:\\Users\\calvin> nvim\nPS C:\\Users\\calvin> \n```\n\n## Aside: Terminal Commands\n\n- Like Python and Neovim, there are also terminal commands!\n  - Two are `python`/`python3` and `neovim`!\n- Another is `ls`, which stands for \"list\"\n\t- This command has been around so long, it is from an era when commands were shorter to save precious computer memory!\n- It \"lists\" local files, and can list them by name!\n\n## Aside: Using `ls`\n\n- Try out this command, to see that you have a `pw.py` file!\n```{.ps  code-line-numbers=\"false\"}\n$ ls pw.py\n```\n- What do you see (different on Windows and MacOS)?\n\n## Checkpoint\n\n- If you do not have a `pw.py` file, stop here until you have one!\n```{.ps filename=\"Windows\" code-line-numbers=\"false\"}\nPS C:\\Users\\calvin> ls pw.py\n\n\n    Directory: C:\\Users\\cd-desk\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         5/20/2025   3:21 PM            151 pw.py\n```\n```{.zsh filename=\"MacOS\" code-line-numbers=\"false\"}\n$ ls pw.py\npw.py\n$\n```\n\n## .py files\n\n- There are two common ways to use `.py` files\n- I believe the most common is via `import`\n- To begin, at the command line, start Pythoni\n\n- On Windows, type `python`\n```{.ps filename=\"Windows\" code-line-numbers=\"false\"}\nPS C:\\Users\\calvin> python\n```\n- On MacOS, type `python3`\n```{.zsh filename=\"MacOS\" code-line-numbers=\"false\"}\n$ python3\n```\n- On both, press the **↵ᴇɴᴛᴇʀ** key.\n\n## See Python\n\n- You'll see something like this:\n```{.email code-line-numbers=\"false\"}\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n- Take note of the prompt!\n- `>>>`\n- Those three are how you know it is Python, and not the Terminal, that you are working in.\n\n## Import\n\n- Versus last time, we now have a piecewise function written in a `.py` file we can reference.\n- To do so, we:\n\t- Type `import` followed by a space\n\t- Type the filename less the `.py` *extension*\n\t- It should look like this:\n\n```{.email code-line-numbers=\"false\"}\nPS C:\\Users\\calvin> python\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pw\n>>>\n```\n\n## Modules\n\n- `import pw` will introduce a new variable to Python to which we can refer by name (pw)\n- It is of a new type for us, \"module\"\n```{.email code-line-numbers=\"false\"}\n>>> type(pw)\n<class 'module'>\n```\n- Modules correspond to `.py` files!\n```{.email code-line-numbers=\"false\"}\n>>> pw\n<module 'pw' from 'C:\\\\Users\\\\calvin\\\\pw.py'>\n```\n- (The `from` will look different on different computers)\n\n## Importing Functions\n\n- We can use functions inside modules in a few ways.\n- First, we can use the module name (`pw`) followed by a dot or period (`.`) followed by the name of the function.\n```{.email code-line-numbers=\"false\"}\n>>> pw.piecewise(-1)\n14\n```\n\n## Renaming Functions\n\n- Second, we can just use single equals assignment\n```{.email code-line-numbers=\"false\"}\n>>> piecewise = pw.piecewise\n>>> piecewise(4)\n9\n```\n\n## Using `from`\n\n- Third, we can use the `from` keyword in our import.\n\t- This is *by far* preferred (it is more clear)\n```{.email code-line-numbers=\"false\"}\n>>> from pw import piecewise\n>>> piecewise(11)\n-9\n```\n- I only show you the other methods to make it clear what this method is doing.\n\n",
    "supporting": [
      "02_neovim_files\\figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}
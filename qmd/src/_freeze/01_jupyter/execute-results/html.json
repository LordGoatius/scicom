{
  "hash": "63e1904c5c96bdc975d56f1557904bb6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Python\n---\n\n\n## Why Python?\n\n* Python is free,\n* Python is very widely used,\n* Python is flexible,\n* Python is relatively easy to learn,\n* and Python is quite powerful.\n\n## Why not Python?\n\n- Python is a general purpose language used for Scientific Computing. \n- _Not_ to build apps, build software, manage databases, or develop user interfaces. \n- Solve scientific and mathematical problems.\n\n## Python libraries\n\nThere is an overwhelming abundance of information available about Python and the suite of tools that we will frequently use.\n\n* [Python](https://www.python.org/),\n* [`numpy` (numerical Python)](https://www.numpy.org/),\n* [`matplotlib` (a suite of plotting tools)](https://matplotlib.org/),\n* [`scipy` (scientific Python)](https://www.scipy.org/), and\n* [`sympy` (symbolic Python)](https://www.sympy.org/en/index.html).\n\n## Hello, World!\n\n::: {#ab752bea .cell execution_count=1}\n``` {.python .cell-code}\nprint(\"Hello, world!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, world!\n```\n:::\n:::\n\n\n- `print` is a function\n    - It is a *built-in* function\n- `()` are used to *call*\"* a function\n- Double quotes `\"\"` are used to enclose a *string* of characters\n    - Single quotes `''` may also be used.\n    - Only stay \"string\" instead of \"word\" as may be multiple words, an email address, etc.\n\n## These slides\n\n- Code blocks will be enclosed in a white box on a black background, with code in a *monospace* (all characters of the same width) font of slightly smaller size.\n- The code will be *syntax highlighted*, as it will be highlighted in most programs for writing Python.\n- There will be line numbers.\n\n::: {#4173d436 .cell execution_count=2}\n``` {.python .cell-code}\nprint(\"I will show code this way on these slides.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI will show code this way on these slides.\n```\n:::\n:::\n\n\n- The output of a Python expression will be in white text of the same size and font style under the code block.\n\n\n## Environments\n\n- For scientific computing, often use \"Jupter\" or \"IPython\"\n    - Usually through the web at [Google Colab](https://colab.research.google.com/)\n    - Or open source via [Binder](mybinder.org)\n    - Historically on your device (not a website) via [JupyterLab](https://jupyter.org/)\n        - Still opens in a web browser!\n    - I like [VS Code](https://code.visualstudio.com/docs/datascience/jupyter-notebooks).\n        - Either [Jupyter](https://code.visualstudio.com/docs/datascience/jupyter-notebooks) or [Quarto](https://quarto.org/docs/tools/vscode.html)\n\n## Commonalities\n\n- Each of these environments has..\n    - *Notebooks*\n        - The \"document\" or \"file\" for computational work\n        - Saved as a \".ipynb\" (**I**nteractive **PY**thon **N**ote**B**ooks)\n\n## Notebooks\n\n- A text file (.txt) contains an ordered collection of letters.\n- A notebook is an ordered collection of cells.\n    - Text cells contain notes, just like a text file\n    - Code cells contain calculations, like a \"script\" writting in programming language (like a Python file)\n\n## Text Cells\n\n- One type of cell is the \"Text\" cell.\n- They are not related to Python or performing calculations.\n- They are used to take notes and keep track of process.\n\n## Markdown\n\n- These slides, and the text in text cells can be styled in Markdown.\n- Markdown is a way to styling text using only text characters.\n```{.md}\nPlain text. **Bold**. *Italic*. [Link](https://xkcd.com/).\n\n- List item\n- List item\n```\nPlain text. **Bold**. *Italic*.  [Link](https://xkcd.com/).\n\n- List item\n- List item\n\n## On Markdown\n\n- Markdown is a wonderful tool and will recur throughout this term.\n- All course materials are written in Markdown.\n- Learn more here: [Markdown Guide](https://www.markdownguide.org/getting-started/#flavors-of-markdown)\n- Use it here: [Dillinger.io](https://dillinger.io/)\n\n## Code Cells\n\n- The other type of cell is a code cell.\n- The text within a code cell is Python code\n- *Beneath* the cell is output of the Python code.\n\n::: {#c8e8a686 .cell execution_count=3}\n``` {.python .cell-code}\n\"Like this\"\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'Like this'\n```\n:::\n:::\n\n\n## Code Cells\n\n- We will learn more latter, but\n- In general, the output is whatever the result of *last* line is.\n\n::: {#2242c3b3 .cell execution_count=4}\n``` {.python .cell-code}\n\"This doesn't show up\"\n1 + 1\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n2\n```\n:::\n:::\n\n\n## Code Cells\n\n- After survey of environments, we'll get into writing code!\n\n## Colab\n\n- Go to [https://colab.research.google.com/](https://colab.research.google.com/)\n- The landing page is a Colab guide.\n- You will have to log in to a Google account to run run code blocks.\n- Here's the Colab example:\n\n::: {#c6d0d137 .cell execution_count=5}\n``` {.python .cell-code}\nseconds_in_a_day = 24 * 60 * 60\nseconds_in_a_day\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n86400\n```\n:::\n:::\n\n\n## Saving Notebooks\n\n- Saving Colab notebooks I find *annoying*.\n- The best way is probably making a folder for course in Google drive, and naming with a number and a subject (today is `01_Python.ipynb` in the `SciCom` folder) for me.\n- Think about *how* to save all your code **before** writing any code.\n\n## Binder\n\n- If you don't like Google and do like browsers, the best option is probably Binder.\n- Binder is community provided (not tech company provided).\n- Here is a guide: [Zero-to-Binder](https://the-turing-way.netlify.app/communication/binder/zero-to-binder.html)\n\n## Quick Demo\n\n- You can navigate to [https://mybinder.org](https://mybinder.org)\n- You can use a GitHub repository I made. [https://github.com/cd-public/my-first-binder](https://github.com/cd-public/my-first-binder)\n- You can use a file I made `hello.ipynb`\n    - **I**nteractive **PY**thon **N**ote**B**ook.\n- We will cover GitHub more soon!\n\n## Sample Link\n\n- I think this link works to have something. \n    - [Link](https://mybinder.org/v2/gh/cd-public/my-first-binder/87acf03a6f87b2f4de46a4cc939097db4911e9f2?urlpath=lab%2Ftree%2Fhello.ipynb)\n- Not a great way to save these.\n    - Download, or\n    - Save to GitHub\n    - Saving on Binder saves only until browser window closes!\n\n## JupyterLab\n\n- Sometimes the internet is out, etc.\n- Before Colab and Binder, JupyterLab could run on your own computer.\n    - Download and install [Python](https://www.python.org/downloads/)\n    - Use Python to download an extension to Python called [JupyterLab](https://jupyter.org/install)\n    - Use Python to run Jupyterlab\n- Usually done through the *terminal*\n\n## Terminal\n\n- I will also use code expression to show *commands* (not just Python code)\n- I will prefix *commands* with `%` (rather than Mac `$` or Windows `>`) and use different highlighting.\n- Here I demo `echo` which echoes text.\n\n::: {#ede5b151 .cell execution_count=6}\n``` {.python .cell-code}\n%echo like this\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlike this\n```\n:::\n:::\n\n\n## Terminal Expression\n\n- On Window we use `python`\n- One MacOS we use `python3`\n- I will use `python` just because this slides are generated on Windows:\n\n:::{.content-visible when-format=\"pdf\"}\n- If you can see this, there isn't a built-in \"line magic\" to use command line Python from within Jupyter.\n- I simply program one with `%alias`\n\n::: {#40e16dbd .cell execution_count=7}\n``` {.python .cell-code}\n%alias python python\n```\n:::\n\n\n- This was out-of-scope for this lecture.\n:::\n\n::: {#b295841b .cell execution_count=8}\n``` {.python .cell-code}\n%python -c \"print(9 * -1 * -1 + 5)\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14\n```\n:::\n:::\n\n\nLet's deconstruct what's happening here.\n\n## The prompt\n\n- The first character shown is  the *prompt*\n    - We use `%`\n    - Windows will show `>`, likely after the name of a folder\n    - MacOS will show `$`\n- We do not type the prompt! it is already there!\n\n::: {#0c08b4e8 .cell execution_count=9}\n``` {.python .cell-code}\n%python -c \"print(9 * -1 * -1 + 5)\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14\n```\n:::\n:::\n\n\n## The command\n\n- The first thing we type is `python` (or `python3` on MacOS)\n    - Lowercase!\n    - This instructs the command line to run the Python program.\n    - In early computing all programs ran this way!\n- I term this the \"command\" - the command, direction, or instruction we provide to system.\n\n::: {#69756d6f .cell execution_count=10}\n``` {.python .cell-code}\n%python -c \"print(9 * -1 * -1 + 5)\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14\n```\n:::\n:::\n\n\n## The option\n\n- Next, we type `-c`\n    - We call this the option (or sometimes \"flag\")\n    - A dash-prefixed character or word that changes how the command is interpreted\n- Another example is `-help`!\n\n::: {#e0199bcc .cell execution_count=11}\n``` {.python .cell-code}\n%python -help\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nOptions (and corresponding environment variables):\n-b     : issue warnings about converting bytes/bytearray to str and comparing\n         bytes/bytearray with str or bytes with int. (-bb: issue errors)\n-B     : don't write .pyc files on import; also PYTHONDONTWRITEBYTECODE=x\n-c cmd : program passed in as string (terminates option list)\n-d     : turn on parser debugging output (for experts only, only works on\n         debug builds); also PYTHONDEBUG=x\n-E     : ignore PYTHON* environment variables (such as PYTHONPATH)\n-h     : print this help message and exit (also -? or --help)\n-i     : inspect interactively after running script; forces a prompt even\n         if stdin does not appear to be a terminal; also PYTHONINSPECT=x\n-I     : isolate Python from the user's environment (implies -E and -s)\n-m mod : run library module as a script (terminates option list)\n-O     : remove assert and __debug__-dependent statements; add .opt-1 before\n         .pyc extension; also PYTHONOPTIMIZE=x\n-OO    : do -O changes and also discard docstrings; add .opt-2 before\n         .pyc extension\n-P     : don't prepend a potentially unsafe path to sys.path; also\n         PYTHONSAFEPATH\n-q     : don't print version and copyright messages on interactive startup\n-s     : don't add user site directory to sys.path; also PYTHONNOUSERSITE=x\n-S     : don't imply 'import site' on initialization\n-u     : force the stdout and stderr streams to be unbuffered;\n         this option has no effect on stdin; also PYTHONUNBUFFERED=x\n-v     : verbose (trace import statements); also PYTHONVERBOSE=x\n         can be supplied multiple times to increase verbosity\n-V     : print the Python version number and exit (also --version)\n         when given twice, print more information about the build\n-W arg : warning control; arg is action:message:category:module:lineno\n         also PYTHONWARNINGS=arg\n-x     : skip first line of source, allowing use of non-Unix forms of #!cmd\n-X opt : set implementation-specific option\n--check-hash-based-pycs always|default|never:\n         control how Python invalidates hash-based .pyc files\n--help-env: print help about Python environment variables and exit\n--help-xoptions: print help about implementation-specific -X options and exit\n--help-all: print complete help information and exit\n\nArguments:\nfile   : program read from script file\n-      : program read from stdin (default; interactive mode if a tty)\narg ...: arguments passed to program in sys.argv[1:]\n```\n:::\n:::\n\n\n## The argument\n\n- Think of an argument as \"something we bring up with someone\"\n- Here we bring up \"What is the result of this Python expression\"\n- We can provide other arguments with other options!\n\n::: {#2c3b4ab5 .cell execution_count=12}\n``` {.python .cell-code}\n%python -c \"print(9 * -1 * -1 + 5)\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14\n```\n:::\n:::\n\n\n## The print function\n\n- To see the result of an expression, we inform Python we wish the result to be `print`ed.\n- Named before monitors were a things, and computational results were printed on tape!\n- Here, it means \"show the answer at the command line!\"\n- We can compare:\n\n::: {#9ca6676d .cell execution_count=13}\n``` {.python .cell-code}\n%python -c \"print(9 * -1 * -1 + 5)\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14\n```\n:::\n:::\n\n\n## Non-printing\n\n- Without `print` - nothing shows up!\n\n::: {#3feb9440 .cell execution_count=14}\n``` {.python .cell-code}\n%python -c \"(9 * -1 * -1 + 5)\"\n```\n:::\n\n\n- The calculation is still performed, but it is not *communicated* back to us via the command line.\n\n## The \"parens\"\n\n- I call them \"parens\" because I don't know how to spell \"parentheses\"\n    - Had to look it up for this slide.\n- Parens *call* a function.\n- Otherwise nothing happens!\n\n::: {#b11cd31b .cell execution_count=15}\n``` {.python .cell-code}\n%python -c \"print\"\n```\n:::\n\n\n- See?\n\n## Compare\n\n- Even if we print *nothing*, when we use parens we get to see the line of nothing at the command line.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- No empty line is printed.\n\n::: {#bc9d3e0c .cell execution_count=16}\n``` {.python .cell-code}\n%python -c \"print\"\n```\n:::\n\n\n- This text is slightly higher.\n:::\n\n::: {.column width=\"50%\"}\n- An empty line is printed.\n\n::: {#36bd1e19 .cell execution_count=17}\n``` {.python .cell-code}\n%python -c \"print()\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n```\n:::\n:::\n\n\n- This text is slightly lower.\n\n:::\n\n::::\n\n## The Difference\n\n- If a print is called, the computer takes some action.\n\n::: {#0d008d0d .cell execution_count=18}\n``` {.python .cell-code}\nprint()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n```\n:::\n:::\n\n\n- Otherwise, printing is kinda goofy.\n\n::: {#b79159cd .cell execution_count=19}\n``` {.python .cell-code}\nprint\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n<function print(*args, sep=' ', end='\\n', file=None, flush=False)>\n```\n:::\n:::\n\n\n- (That is how the *computer* understands what `print`` is)\n\n## Review:\n\n- To see the result of an expression, we inform Python we wish the result to be `print`ed.\n- Named before monitors were a things, and computational results were printed on tape!\n- Here, it means \"show the answer at the command line!\"\n\n::: {#4a212abe .cell execution_count=20}\n``` {.python .cell-code}\n%python -c \"print(9 * -1 * -1 + 5)\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14\n```\n:::\n:::\n\n\n",
    "supporting": [
      "01_jupyter_files"
    ],
    "filters": [],
    "includes": {}
  }
}
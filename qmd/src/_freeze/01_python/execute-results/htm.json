{
  "hash": "b8c5ed29df5545e893e2a3052a414c25",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Python\n---\n\n\n\n\n# Why Python?\n\n## On Python\n\n* Python is free,\n* Python is very widely used,\n* Python is flexible,\n* Python is relatively easy to learn,\n* and Python is quite powerful.\n\n## Why not Python?\n\n- Python is a general purpose language used for Scientific Computing. \n- _Not_ to build apps, build software, manage databases, or develop user interfaces. \n- Solve scientific and mathematical problems.\n\n## Python libraries\n\nScientists often use the following:\n\n* [Python](https://www.python.org/),\n* [`numpy` (numerical Python)](https://www.numpy.org/),\n* [`matplotlib` (a suite of plotting tools)](https://matplotlib.org/),\n* [`scipy` (scientific Python)](https://www.scipy.org/), and\n* [`sympy` (symbolic Python)](https://www.sympy.org/en/index.html).\n\nWe'll get to these.\n\n# Running Example\n\n## Diving In\n\n- Taking Python as a given, we'll:\n    - Use an example of something I helped a student with recently\n    - Show step-by-step how to use Python\n    - Introduce a number of Python features to solve the problem more easily.\n- This was from an introductory physics class I believe; I don't know the context.\n\n## Motivating Example\n\n- Recently, I helped a student stuck on this:\n\n$$\nf(x) =\n\\begin{cases}\n  9x^2 + 5 & x < 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x > 8\n\\end{cases}\n$$\n\n- Find $f(x)$ for each of the following $x$ values:\n$$\n\\{-1, 4, 5, 8, 11\\}\n$$\n\n## Is this \"real\"?\n\n- Models income tax brackets, one of the most important drivers of human behavior in the largest economies in the world.\n- We use a simpler contrived example for now...\n\n<table style=\"font-size:12px\">\n<th>Marginal Tax Rate</th>\n<th>Single Taxable Income</th>\n<th>Married Filing Jointly or Qualified Widow(er) Taxable Income</th>\n<th>Married Filing Separately Taxable Income</th>\n<th>Head of Household Taxable Income</th>\n</tr>\n<tr>\n<th>10%</th>\n<td>$0 – $9,275</td>\n<td>$0 – $18,550</td>\n<td>$0 – $9,275</td>\n<td>$0 – $13,250</td>\n</tr>\n<tr>\n<th>15%</th>\n<td>$9,276 – $37,650</td>\n<td>$18,551 – $75,300</td>\n<td>$9,276 – $37,650</td>\n<td>$13,251 – $50,400</td>\n</tr>\n<tr>\n<th>25%</th>\n<td>$37,651 – $91,150</td>\n<td>$75,301 – $151,900</td>\n<td>$37,651 – $75,950</td>\n<td>$50,401 – $130,150</td>\n</tr>\n<tr>\n<th>28%</th>\n<td>$91,151 – $190,150</td>\n<td>$151,901 – $231,450</td>\n<td>$75,951 – $115,725</td>\n<td>$130,151 – $210,800</td>\n</tr>\n<tr>\n<th>33%</th>\n<td>$190,151 – $413,350</td>\n<td>$231,451 – $413,350</td>\n<td>$115,726 – $206,675</td>\n<td>$210,801 – $413,350</td>\n</tr>\n<tr>\n<th>35%</th>\n<td>$413,351 – $415,050</td>\n<td>$413,351 – $466,950</td>\n<td>$206,676 – $233,475</td>\n<td>$413,351 – $441,000</td>\n</tr>\n<tr>\n<th>39.6%</th>\n<td>$415,051+</td>\n<td>$466,951+</td>\n<td>$233,476+</td>\n<td>$441,001+</td>\n</table>\n\n\n## How to solve?\n\n- Think about how you would solve such a problem.\n- What steps would you take?\n- What would making solving it hard?\n    - Keep track of details?\n    - Performing the arithmetic?\n    - Anything else?\n- Python, in my view, is a way to solve these problems.\n\n## Python in action\n\n- My preferred way to do calculation as an experienced Python user is writing *code*:\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- Mathematical expression\n$$\n\\begin{cases}\n  9x^2 + 5 & x < 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x > 8\n\\end{cases}\n$$\n:::\n\n::: {.column width=\"50%\"}\n\n- Python expression (code)\n\n::: {#bf12db35 .cell execution_count=1}\n``` {.python .cell-code}\n9 * -1 * -1 + 5\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n14\n```\n:::\n:::\n\n\n:::\n\n::::\n\n- I write `x * x` for $x^2$ because it's non-obvious how to write \"squared\" yet.\n\n## Arithmetic Operations\n\n- In Python, we can write many of the same arithmetic operations we use in our math and science classes.\n\n::: {#382a0fe8 .cell execution_count=2}\n``` {.python .cell-code}\n6 + 3\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n9\n```\n:::\n:::\n\n\n::: {#fbef9c1b .cell execution_count=3}\n``` {.python .cell-code}\n6 - 3\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n3\n```\n:::\n:::\n\n\n::: {#09ef0ce2 .cell execution_count=4}\n``` {.python .cell-code}\n6 * 3\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n18\n```\n:::\n:::\n\n\n::: {#91a90225 .cell execution_count=5}\n``` {.python .cell-code}\n6 / 3\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n2.0\n```\n:::\n:::\n\n\n## Wait?\n\n- Use Python? How?\n- To use Python to make this calculation, first we must install Python.\n    - It is a program, like Firefox, MS Word or Fortnite\n\n# Installing Python\n\n## Warning!\n\n- There is a very important box to check while installing!\n    - Be careful working ahead!\n    - We'll teach how to fix not checking this box *but not for a while*\n\n## Installation\n\n- We go to the offial webpage to get an installer for our computer:\n    - [https://www.python.org/downloads/](https://www.python.org/downloads/)\n- Be careful about starting it!\n    - You can open it and check the next slide.\n\n## Add Python to PATH\n\n![](img/add-python-to-path.png)\n\n## Why?\n\n- The benefit of adding Python to path is that we can use it at\n- &lt;dramatic music&gt;\n- *The Command Line*\n    - A text-based interface to computing resources, including its ability to do e.g. arithmetic and save notes.\n\n## Terminal\n\n- On MS Windows\n    - I press Windows key, type \"terminal\" then press enter.\n- On MacOS\n    - I open Launchpad, type \"terminal\" then press enter.\n\n\n## MacOS\n\n![](img/zsh.png)\n\n## Windows\n\n![](img/ps.webp)\n\n\n## Expression evaluation\n\n- Returning to the terminal, we can type at the \"prompt\".\n- On MacOS, perhaps a line that begins with `$` and a flashing cursor\n- On Window, perhaps `PS C:\\Users\\calvin>`\n    - `PS` stands for \"powershell\" - more latter.\n    - `C:\\Users\\calvin` is the name of a folder - more latter\n    - `>` is the prompt, with a flashing cursor.\n\n## \"Run\" Python\n\n*In the following examples, I remove line numbers to denote they are not Python code snippets.*\n\n- On Windows, type `python`\n```{.ps filename=\"Windows\" code-line-numbers=\"false\"}\nPS C:\\Users\\calvin> python\n```\n- On MacOS, type `python3`\n```{.zsh filename=\"MacOS\" code-line-numbers=\"false\"}\n$ python3\n```\n- On both, press the **↵ᴇɴᴛᴇʀ** key.\n\n## See Python\n\n- You'll see something like this:\n```{.email code-line-numbers=\"false\"}\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n- Take note of the prompt!\n- `>>>`\n- Those three are how you know it is Python, and not the Terminal, that you are working in.\n\n## Example\n\n- If I type `python` at the command line\n- Then `9 * -1 * -1 + 5` *within* Python\n- It will look like this:\n\n```{.email code-line-numbers=\"false\"}\nPS C:\\Users\\calvin> python\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> 9 * -1 * -1 + 5\n14\n>>>\n```\n\n- This is how Python shows that `9 * -1 * -1 + 5` is `14`\n\n# Evaluating Expressions\n\n## Recall\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n$$\n\\begin{cases}\n  9x^2 + 5 & x < 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x > 8\n\\end{cases}\n$$\n$$\n\\{-1, 4, 5, 8, 11\\}\n$$\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{.python code-line-numbers=\"false\"}\n>>> 9 * -1 * -1 + 5\n14\n>>> 9\n9\n>>> 9\n9\n>>> 2 - 8\n-6\n>>> 2 - 11\n-9\n```\n\n:::\n\n::::\n\n- This is still quite tedious and annoying!\n\n## (In)equality testing\n\n- Like `+` or `-` which we use to calculate numbers...\n- We can use `<` or `>` to calculate inequalities.\n- Specifically, we see whether an inequality is `True` or `False`\n\n::: {#8a40ada5 .cell execution_count=6}\n``` {.python .cell-code}\n-1 < 4\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#f5e07f09 .cell execution_count=7}\n``` {.python .cell-code}\n4 < 4\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nFalse\n```\n:::\n:::\n\n\n## Accomodating Keyboards\n\n- Some things aren't super easy to type.\n- I don't have a \"$\\leq$\" key on my keyboard.\n- Combine with `=` as `<=` for \"less than or equal\" or \"$\\leq$\"\n\n::: {#8ee99dcf .cell execution_count=8}\n``` {.python .cell-code}\n4 <= 4\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nTrue\n```\n:::\n:::\n\n\n- We can \"chain\" inequalities as well - one after another.\n\n::: {#a8b62439 .cell execution_count=9}\n``` {.python .cell-code}\n4 <= 4 <= 8\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nTrue\n```\n:::\n:::\n\n\n## A note\n\n- We always put the equal sign `=` second.\n\n::: {#9b7bfff9 .cell execution_count=10}\n``` {.python .cell-code}\n4 <= 5\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#2b666d37 .cell execution_count=11}\n``` {.python .cell-code}\n5 >= 4\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nTrue\n```\n:::\n:::\n\n\n- A (somewhat confusing) error if we try `=>`\n\n```{.email code-line-numbers=\"false\"}\n>>> 4 => 5\n  File \"<stdin>\", line 1\n    4 => 5\n    ^\nSyntaxError: cannot assign to literal\n```\n\n# `=` and `==`\n\n## New Topics\n\n- We have now touch on two new topics:\n    - `True` and `False`\n        - Expressions which don't *evaluate* to a number\n        - Called \"booleans\"\n    - \"Assignment\"\n        - Associated with the `=` sign\n        - Different from inequality testing!\n- We'll explore both!\n\n## Booleans\n\n- Sometimes, a Python *expression* is a numerical value.\n\n::: {#4d9d6182 .cell execution_count=12}\n``` {.python .cell-code}\n2 + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n4\n```\n:::\n:::\n\n\n::: {#eaa6eb63 .cell execution_count=13}\n``` {.python .cell-code}\n7\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n7\n```\n:::\n:::\n\n\n- But it doesn't have to be!\n\n::: {#ff0380d5 .cell execution_count=14}\n``` {.python .cell-code}\n2 < 2\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nFalse\n```\n:::\n:::\n\n\n## If\n\n- Booleans are mostly useful for writing `if` statements.\n    - These are *multiline* expressions in Python.\n- To see the result of multi-line expression, we have to print the result...\n\n::: {#958917ee .cell execution_count=15}\n``` {.python .cell-code}\nif (1 <= 1):\n    print(2 + 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n```\n:::\n:::\n\n\n::: {#df66cf2c .cell execution_count=16}\n``` {.python .cell-code}\nif (1 < 1):\n    print(2 + 2)\n```\n:::\n\n\n## Piecewise\n\n- We can see the immediate use of this in a piecewise function!\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n$$\n\\begin{cases}\n  9x^2 + 5 & x < 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x > 8\n\\end{cases}\n$$\n$$\n\\{-1, 4, 5, 8, 11\\}\n$$\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#fc7196fc .cell execution_count=17}\n``` {.python .cell-code}\nif (-1 < 4):\n    print(9 * -1 * -1 + 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14\n```\n:::\n:::\n\n\n- Or least part of one...\n\n::: {#13227383 .cell execution_count=18}\n``` {.python .cell-code}\nif (4 < 4):\n    print(9 * 4 * 4 + 5)\n```\n:::\n\n\n- Uh oh!\n\n:::\n\n::::\n\n\n## Else\n\n- Oftentimes, we use `if` with `else`\n\n::: {#9d58dbe0 .cell execution_count=19}\n``` {.python .cell-code}\nif (1 < 1):\n    print(\"1 is less than 1\")\nelse:\n    print(\"1 is not less than 1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 is not less than 1\n```\n:::\n:::\n\n\n## Elif\n\n- If we have more than two options, we can place a special `elif` in the middle.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {#d2e4f8dd .cell execution_count=20}\n``` {.python .cell-code}\nif (1 < 1):\n    print(\"1 is less than 1\")\nelif (1 > 1):\n    print(\"1 is greater than 1\")\nelse:\n    print(\"1 is equal to 1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 is equal to 1\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#86235fdb .cell execution_count=21}\n``` {.python .cell-code}\nif (2 < 1):\n    print(\"2 is less than 1\")\nelif (2 > 1):\n    print(\"2 is greater than 1\")\nelse:\n    print(\"2 is equal to 1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2 is greater than 1\n```\n:::\n:::\n\n\n:::\n\n::::\n\n- By the way, it is extremely obnoxious to manually type `2` in *5 different places*\n\n## Assignment\n\n- We can also assign variables!\n    - I call this *single-equals assignment*\n    - Use a single equals sign `=` and some variable name, like `x`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {#285cd4e4 .cell execution_count=22}\n``` {.python .cell-code}\nx = 1\nif (x < 1):\n    print(\"x is less than 1\")\nelif (x > 1):\n    print(\"x is greater than 1\")\nelse:\n    print(\"x is equal to 1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is equal to 1\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#064895ce .cell execution_count=23}\n``` {.python .cell-code}\nx = 2\nif (x < 1):\n    print(\"x is less than 1\")\nelif (x > 1):\n    print(\"x is greater than 1\")\nelse:\n    print(\"x is equal to 1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is greater than 1\n```\n:::\n:::\n\n\n:::\n\n::::\n\n## Double equals equality\n\n- I call it *single-equals assignment* because sometimes we check if a variable is precisely equal to some value.\n- That is somewhat confusingly done with `==` *double equals equality* test.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {#cfc51873 .cell execution_count=24}\n``` {.python .cell-code}\nx = 1\nif (x == 1):\n    print(\"x is equal to 1\")\nelse:\n    print(\"x is not equal to 1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is equal to 1\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#29110fe6 .cell execution_count=25}\n``` {.python .cell-code}\nx = 2\nif (x == 1):\n    print(\"x is equal to 1\")\nelse:\n    print(\"x is not equal to 1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is not equal to 1\n```\n:::\n:::\n\n\n:::\n\n::::\n\n## Double ** Exponentation\n\n- Doubling is used in a few other cases.\n- Double asterisk `**` is exponentiation.\n\n::: {#92e07219 .cell execution_count=26}\n``` {.python .cell-code}\n5 ** 2\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n25\n```\n:::\n:::\n\n\n## Piecewise\n\n- We can finally write the piecewise expression!\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n$$\n\\begin{cases}\n  9x^2 + 5 & x < 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x > 8\n\\end{cases}\n$$\n$$\n\\{-1, 4, 5, 8, 11\\}\n$$\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#b2d273ed .cell execution_count=27}\n``` {.python .cell-code}\nx = 11\nif (x < 4):\n    print(9 * x ** 2 + 5)\nelif (4 <= x <= 8):\n    print(9)\nelif (x > 8):\n    print(2 - x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-9\n```\n:::\n:::\n\n\n:::\n\n::::\n\n# Code Reuse\n\n## Recycle\n\n- It is still extremely tedious to either:\n    - Copy-paste, or\n    - Type more than once.\n- Also very annoying/difficult to write them many lines without error!\n- We introduce the `def` keyword to define `functions`\n- A way to reuse code we have already written.\n\n## `def`\n\n::: {#0542b51c .cell execution_count=28}\n``` {.python .cell-code}\ndef double(x):\n    print(x + x)\n```\n:::\n\n\n- `def` + *some function name* + `(` + *some variable name* + `):`\n\n::: {#d5ce31b1 .cell execution_count=29}\n``` {.python .cell-code}\ndouble(7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14\n```\n:::\n:::\n\n\n- \"Call\" functions the same way we call `print` - with parens.\n\n## `return`\n\n- It is more common to use `return` than `print` in a function.\n- When we call a function, we can think of it as expression with some value.\n- That value is defined by the value that is return.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {#5bfb8d0e .cell execution_count=30}\n``` {.python .cell-code}\ndef six_gt_five_return():\n    print(True)\n```\n:::\n\n\n::: {#6310cff4 .cell execution_count=31}\n``` {.python .cell-code}\nif (six_gt_five_return()):\n    print(\"it is\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#88521c56 .cell execution_count=32}\n``` {.python .cell-code}\ndef six_gt_five_print():\n    return True\n```\n:::\n\n\n::: {#a28641fa .cell execution_count=33}\n``` {.python .cell-code}\nif (six_gt_five_print()):\n    print(\"it is\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nit is\n```\n:::\n:::\n\n\n:::\n\n::::\n\n## Example\n\n- Suppose an interest rate doubles our savings every ~7 years.\n- How much savings in 14 years?\n\n::: {#3f106e02 .cell execution_count=34}\n``` {.python .cell-code}\nsavings = 10\nsavings = double(savings) # 7 yrs\nsavings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n20\n```\n:::\n:::\n\n\n## Use return\n\n::: {#0e8f46bd .cell execution_count=35}\n``` {.python .cell-code}\ndef double(x):\n    return x + x\n```\n:::\n\n\n- Now, `double(savings)` becomes equal to `x + x`\n\n::: {#a4103ddd .cell execution_count=36}\n``` {.python .cell-code}\nsavings = 10\nsavings = double(savings) # 7 yrs\nsavings\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n20\n```\n:::\n:::\n\n\n::: {#0fc4ea6b .cell execution_count=37}\n``` {.python .cell-code}\ndouble(savings)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n40\n```\n:::\n:::\n\n\n- Or even\n\n::: {#f7766324 .cell execution_count=38}\n``` {.python .cell-code}\ndouble(double(10))\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n40\n```\n:::\n:::\n\n\n## Piecewise\n\n- We can finally write the piecewise function (was: expression)!\n    - Function: use many times in many expressions\n    - Expression: evaluate once and get one answer\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n$$\n\\begin{cases}\n  9x^2 + 5 & x < 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x > 8\n\\end{cases}\n$$\n$$\n\\{-1, 4, 5, 8, 11\\}\n$$\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#d0f4b917 .cell execution_count=39}\n``` {.python .cell-code}\ndef piecewise(x):\n    if (x < 4):\n        return 9 * x ** 2 + 5\n    elif (4 <= x <= 8):\n        return 9\n    elif (x > 8):\n        return 2 - x\n```\n:::\n\n\n::: {#9b680015 .cell execution_count=40}\n``` {.python .cell-code}\npiecewise(4)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n9\n```\n:::\n:::\n\n\n:::\n\n::::\n\n",
    "supporting": [
      "01_python_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}